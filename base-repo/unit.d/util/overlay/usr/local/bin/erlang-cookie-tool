#!/bin/sh

readonly SCRIPT_NAME=$(basename "$0")
: ${ERLANG_COOKIE_SRC:=/volumes/secrets/erlang-cookie/.erlang.cookie}
: ${DEBUG_LOG_PATH:=/var/log/erlang-cookie-tool.log}

# Helpers
log() {
  local msg="$1"
  local date="$(date '+%Y-%m-%d %H:%M:%S')"
  echo "\033[36m[*]\033[0m $SCRIPT_NAME [$date] $msg" >> "$DEBUG_LOG_PATH" >&2
}

errlog() {
  local msg="$1"
  local date="$(date '+%Y-%m-%d %H:%M:%S')"
  echo "\033[31m[x]\033[0m $SCRIPT_NAME [$date]: $msg" >> "$DEBUG_LOG_PATH" >&2
}

get_home() {
  if [ -d "$HOME" ]; then
    echo "$HOME"
    return 0
  elif [ -d "/root" ]; then
    echo "root"
    return 0
  elif [ -z "$HOME" ]; then
    errlog "\$HOME is undefined, exiting"
  elif [ ! -d "$HOME" ]; then
    errlog "The following path was not found: $HOME"
  else
    errlog "Undefined error detecting HOME path"
    exit 1
  fi
}

get_user() {
  local home="${1:-$HOME}"
  if [ -d "$home" ]; then
    stat -c '%U' "$home"
    return 0
  elif getent passwd $(basename "$home") > /dev/null 2>&1; then
    getent passwd $(basename "$home") | cut -d':' -f1
    return 0
  elif getent passwd $(whoami) > /dev/null 2>&1; then
    whoami
    return 0
  elif getent passwd "root" > /dev/null 2>&1; then
    echo "root"
    return 0
  else
    errlog "Undefined error detecting user"
    exit 1
  fi
  echo "$user"
}

get_group() {
  local home="${1:-$HOME}"
  if [ -d "$home" ]; then
    stat -c '%G' "$home"
    return 0
  elif getent group $(basename "$home") > /dev/null 2>&1; then
    getent group $(basename "$HOME") | cut -d':' -f1
    return 0
  elif getent group $(whoami) > /dev/null 2>&1; then
    getent group $(whoami) | cut -d':' -f1
    return 0
  elif getent group "root" > /dev/null 2>&1; then
    echo "root"
    return 0
  else
    errlog "Undefined error detecting group"
    exit 1
  fi
}

# Tests
erlang_cookie_mounted() {
  return $([ -s "$ERLANG_COOKIE_SRC" ])
}

erlang_cookie_defined_in_environment() {
  return $([ -n "$ERLANG_COOKIE" ])
}

# Actions
maybe_link_erlang_cookie() {
  local home="${1:-$HOME}"
  if [ ! -L "$ERLANG_COOKIE_SRC" ]; then
    ln -sf "$ERLANG_COOKIE_SRC" "$home/.erlang.cookie"
  fi
}

maybe_write_erlang_cookie() {
  local value="$1"
  local home="${2:-$HOME}"
  if [ -s "$home/.erlang.cookie" ]; then
    local cur_value=$(cat "$home/.erlang.cookie")
    if [ "$value" -ne "$cur_value" ] || [ -n "$cur_value" ]; then
      echo "$value" > "$home/.erlang.cookie"
    fi
  else
    echo "$value" > "$home/.erlang.cookie"
  fi
}

set_erlang_cookie_perms() {
  local home="${1:-$HOME}"
  local user="$2"
  local group="$3"
  if [ -f "$home/.erlang.cookie" ]; then
    chown "$user:$group" "$home/.erlang.cookie"
    chmod 0600 "$home/.erlang.cookie"
  fi
  if [ -f "$ERLANG_COOKIE_SRC" ]; then
    chown "$user:$group" "$ERLANG_COOKIE_SRC"
    chmod 0600 "$ERLANG_COOKIE_SRC"
  fi
}

print_docs() {
  cat <<'EOF'

*****************************************************************************

erlang-cookie-tool {auto-detect|help}

** DESCRIPTION: *****

This tool will auto-detect the presence of a mounted, non-blank erlang cookie
file at the following path:
  /volumes/secrets/.erlang.cookie

If present, it will be linked to ~/.erlang.cookie and have the correct 
ownership and permissions set.

The correct home, user, and group are auto-detected from the environment
using the following functions: get_home, get_user, get_group

If no erlang cookie is mounted, auto-detect will fall back to testing the
value of $ERLANG_COOKIE. If non-empty, the value will be written to:
  ~/.erlang.cookie
and have the correct ownership and permissions set.

This can be called either in an entrypoint script or in the CMD, however it
is reccomended to add the following to:
  /etc/profile.d/80-detect-erlang-cookie.sh

if [ -s "${ERLANG_COOKIE_SRC:=/volumes/secrets/.erlang.cookie}" ] || 
   [ -n "$ERLANG_COOKIE" ]; then
      erlang-cookie-tool auto-detect
fi

Chances are if you are reading this this file already exists.

To see directions for generating and mounting a new erlang cookie, run the
following in your shell: 
  erlang-cookie-tool help


** WARNING: *********

Do not run this container in production without generating and mounting your
own secure erlang cookie file.

Keep in mind that the erlang distribution protocol requires that all nodes use
the same cookie value. 

The default path for the erlang cookie is: ~/.erlang.cookie.


** USAGE ***********

Generating a secure cookie:
  $ echo $(< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c128) > /tmp/.erlang.cookie

Using your cookie:

The cookie must be owned by the user owning the process, so remember to:
    $ chown user:group ~/.erlang.cookie
    $ chmod 0600 ~/.erlang.cookie

Under docker:
1 Use the following extra argument to docker run:
    -v "$(pwd)/.erlang.cookie:/volumes/secrets/.erlang.cookie"

Under kubernetes:
1 Create your secret: 
    $ kubectl create secret generic erlang-cookie --from-file=/tmp/.erlang.cookie

2 Add it as a volume to your pod:
  apiVersion: v1
  kind: Pod
    metadata:
      name: yourpod
    spec:
      containers:
      - name: your-pod
        image: your-image
        volumeMounts:
        - name: erlang-cookie
          mountPath: /volumes/secrets
      volumes:
      - name: erlang-cookie
        secret:
          secretName: erlang-cookie
          defaultMode: 0600

3 Ensure correct ownership and permissions:
  When you use this base image and mounting to the standard path: 
    /volumes/secrets
  It will be autodetected, permissions and ownership correctly assigned and
  linked into: $HOME/.erlang.cookie.

*****************************************************************************

EOF
}

main() {
  if [ "$1" = "auto-detect" ]; then
    if erlang_cookie_mounted; then
      local cookie_src="$ERLANG_COOKIE_SRC"
      local home=$(get_home)
      local user=$(get_user "$home")
      local group=$(get_group "$home")
      maybe_link_erlang_cookie "$home"
      set_erlang_cookie_perms "$home" "$user" "$group"
    elif erlang_cookie_defined_in_environment; then
      local cookie="$ERLANG_COOKIE"
      local home=$(get_home)
      local user=$(get_user "$home")
      local group=$(get_group "$home")
      maybe_write_erlang_cookie "$cookie" "$home"
      set_erlang_cookie_perms "$home" "$user" "$group"
    else
      errlog "activated auto-detect but didn't match any condition"
    fi
  else
    print_docs
  fi
}

main "$@"

