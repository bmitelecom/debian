#!/bin/bash

readonly name="$1"
readonly base="/etc/security/limits.d"
declare -A limits_map=(
    [core]='c'
    [data]='d'
    [fsize]='f'
    [memlock]='l'
    [nofile]='n'
    [rss]='m'
    [stack]='s'
    [cpu]='t'
    [nproc]='u'
    [as]='v'
    [locks]='x'
    [sigpending]='i'
    [msgqueue]='q'
    [rtprio]='r'
)

function set-ulimit {
    local type="$1"
    local key="$2"
    local value="$3"
    # local type_flag
    local flag
    if [[ -z $key || -z "${limits_map[$key]}" ]]; then
        return 0
    fi
    flag="${limits_map[$key]}"
    if [[ $type = 'hard' ]]; then
        flag="H${flag}"
    fi
    echo "ulimit -${flag} $value"
    ulimit "-${flag}" "$value"
}

function set-nice {
    local level="$1"
    echo "renice ${level} $$"
    renice ${level} $$
}

function usage {
    echo "Usage: $(basename $0) {limit-file} (do not include .conf)"
}

function main {
    local path="${base}/${name}.conf"

    if [[ -f $path ]]; then
        while read -r line; do
            split=($(echo $line))
            type="${split[1]}"
            key="${split[2]}"
            value="${split[3]}"
            if [ "${split[2]}" = 'priority' ]; then
                set-nice "$value"
            else
                set-ulimit "$type" "$key" "$value"
            fi
            unset type key value
        done < $path
    fi
}

if [ -z "$name" ]; then
    usage
else
    main
fi
